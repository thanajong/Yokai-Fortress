#define _CRT_SECURE_NO_WARNING 1
#include<stdio.h>
#include<windows.h>
#include<conio.h>
#include <bits/stdc++.h>
using namespace std;
#include<thread>
#include<time.h>
#define screen_x 130
#define screen_y 56

bool play = 1;
HANDLE wHnd;
COORD bufferSize = { screen_x,screen_y };
SMALL_RECT windowSize = { 0,0,screen_x - 1,screen_y - 1 };
CHAR_INFO consoleBuffer[screen_x * screen_y];
COORD characterPos = { 0,0 };
HANDLE rHnd;
DWORD fdwMode;

bool ammo = 1;
struct bullets {
	int x = 1;
	int y = 1;
	int dir = 0;
}bullet[100];

struct bullets2 {
	int x = 1;
	int y = 1;
	int dir = 0;
}bullet2[100];

const int enemycount = 28;
struct enemies {
	int x;
	int y;
	int type;
	int dir;
}enemy[enemycount];

struct items {
	int x;
	int y;
	int type;
	int dirx;
	int diry;
	int color;
}item;

int gametime = 76000;
int score = 0;
bool itemstatus = 0;
int bulletcount = 0;
int bullet2count = 0;
int streak = 0;
int enemysup = 0, enemysdown = 0, enemysleft = 0, enemysright = 0, enemymup = 0, enemymdown = 0, enemymleft = 0, enemymright = 0, enemylup = 0, enemyldown = 0, enemylleft = 0, enemylright = 0;
int enemy_safe = 0;
int x = 54, y = 54;

void fill_border_to_buffer()
{
	ifstream map("map.txt");
	if (map.is_open())
	{
		string line;
		int lineCount = 0;
		while (getline(map, line))
		{

			for (int column = 0; column < line.length(); column++)
			{
				if (line[column] == '1')
				{
					consoleBuffer[column + screen_x * lineCount].Char.AsciiChar = ' ';
					consoleBuffer[column + screen_x * lineCount].Attributes = 50;
				}
			}
			lineCount++;
		}
	}
}

int setConsole(int x, int y)
{
	wHnd = GetStdHandle(STD_OUTPUT_HANDLE);
	SetConsoleWindowInfo(wHnd, TRUE, &windowSize);
	SetConsoleScreenBufferSize(wHnd, bufferSize);
	return 0;
}

void fill_buffer_to_console()
{
	WriteConsoleOutputA(wHnd, consoleBuffer, bufferSize, characterPos,
		&windowSize);
}

void clear_buffer()
{
	for (int y = 0; y < screen_y; ++y) {
		for (int x = 0; x < screen_x; ++x) {
			consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
			consoleBuffer[x + screen_x * y].Attributes = 7;
		}
	}
}

int setMode()
{
	rHnd = GetStdHandle(STD_INPUT_HANDLE);
	fdwMode = ENABLE_EXTENDED_FLAGS | ENABLE_WINDOW_INPUT |
		ENABLE_MOUSE_INPUT;
	SetConsoleMode(rHnd, fdwMode);
	return 0;
}

void generate_item()
{
	if (itemstatus == 0)
	{
		int i = (rand() % 4) + 1;
		if (i == 1)
		{
			item.x = 92;
			item.y = 14;
		}
		if (i == 2)
		{
			item.x = 22;
			item.y = 14;
		}
		if (i == 3)
		{
			item.x = 22;
			item.y = 43;
		}
		if (i == 4)
		{
			item.x = 92;
			item.y = 43;
		}
		int j = (rand() % 3) + 1;
		if (j == 1)
		{
			item.type = 1;
			item.color = 10 * 16 + 3;
		}
		if (j == 2)
		{
			item.type = 2;
			item.color = 10 * 16 + 4;
		}
		if (j == 3)
		{
			item.type = 3;
			item.color = 10 * 16 + 5;
		}
		item.dirx = rand() % 2;
		item.diry = rand() % 2;
	}
	itemstatus = 1;
}

void item_move()
{
	if (item.dirx == 1)
	{
		item.x++;
		if (item.x + 1 == 107 || (item.x + 1 == 49 && (item.y >= 22 && item.y <= 32)))
		{
			item.dirx = 0;
		}
	}
	else
	{
		item.x--;
		if (item.x - 1 == 2 || (item.x - 1 == 60 && (item.y >= 22 && item.y <= 32)))
		{
			item.dirx = 1;
		}
	}
	if (item.diry == 1)
	{
		item.y++;
		if (item.y + 1 == 52 || ((item.y + 1 == 22 || item.y == 23) && (item.x >= 49 && item.x <= 59)))
		{
			item.diry = 0;
		}
	}
	else
	{
		item.y--;
		if (item.y - 1 == 2 || ((item.y - 1 == 32 || item.y == 31) && (item.x >= 49 && item.x <= 59)))
		{
			item.diry = 1;
		}
	}
}

void fill_item_to_buffer()
{
	consoleBuffer[item.x + screen_x * item.y].Char.AsciiChar = '#';
	consoleBuffer[item.x + screen_x * item.y].Attributes = item.color;
}



void drawgunxd(int x, int y)
{
	consoleBuffer[x + 1 + screen_x * (y - 1)].Char.AsciiChar = '+';
	consoleBuffer[x + 1 + screen_x * (y - 1)].Attributes = 176;
	consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * y].Attributes = 176;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 176;
	consoleBuffer[x + 2 + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + 2 + screen_x * y].Attributes = 176;
}

void drawgunxu(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * y].Attributes = 176;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 176;
	consoleBuffer[x + 2 + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + 2 + screen_x * y].Attributes = 176;
	consoleBuffer[x + 1 + screen_x * (y + 1)].Char.AsciiChar = '+';
	consoleBuffer[x + 1 + screen_x * (y + 1)].Attributes = 176;
}

void drawgunyl(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * y].Attributes = 176;
	consoleBuffer[x + screen_x * (y + 1)].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * (y + 1)].Attributes = 176;
	consoleBuffer[x + 1 + screen_x * (y + 1)].Char.AsciiChar = '+';
	consoleBuffer[x + 1 + screen_x * (y + 1)].Attributes = 176;
	consoleBuffer[x + screen_x * (y + 2)].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * (y + 2)].Attributes = 176;
}

void drawgunyr(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * y].Attributes = 176;
	consoleBuffer[x - 1 + screen_x * (y + 1)].Char.AsciiChar = '+';
	consoleBuffer[x - 1 + screen_x * (y + 1)].Attributes = 176;
	consoleBuffer[x + screen_x * (y + 1)].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * (y + 1)].Attributes = 176;
	consoleBuffer[x + screen_x * (y + 2)].Char.AsciiChar = '+';
	consoleBuffer[x + screen_x * (y + 2)].Attributes = 176;
}

void erasegunx(int x, int y)
{
	// goto(...,...); printf("..."); setcolor(...); but draw only 1 char at a time.
	consoleBuffer[x + screen_x * (y - 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y - 1)].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * (y - 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * (y - 1)].Attributes = 0;
	consoleBuffer[x + 2 + screen_x * (y - 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + 2 + screen_x * (y - 1)].Attributes = 0;

	consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * y].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 0;
	consoleBuffer[x + 2 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + 2 + screen_x * y].Attributes = 0;

	consoleBuffer[x + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x + 2 + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + 2 + screen_x * (y + 1)].Attributes = 0;
}

void eraseguny(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * y].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 0;
	consoleBuffer[x + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x + screen_x * (y + 2)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y + 2)].Attributes = 0;
	consoleBuffer[x + 1 + screen_x * (y + 2)].Char.AsciiChar = ' ';
	consoleBuffer[x + 1 + screen_x * (y + 2)].Attributes = 0;

	consoleBuffer[x - 1 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x - 1 + screen_x * y].Attributes = 0;
	consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * y].Attributes = 0;
	consoleBuffer[x - 1 + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x - 1 + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x + screen_x * (y + 1)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y + 1)].Attributes = 0;
	consoleBuffer[x - 1 + screen_x * (y + 2)].Char.AsciiChar = ' ';
	consoleBuffer[x - 1 + screen_x * (y + 2)].Attributes = 0;
	consoleBuffer[x + screen_x * (y + 2)].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * (y + 2)].Attributes = 0;

}

void drawbullet(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = 'o';
	consoleBuffer[x + screen_x * y].Attributes = 6;
}

void erasebullet(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * y].Attributes = 0;
}

void setcursor(bool visible)
{
	HANDLE console = GetStdHandle(STD_OUTPUT_HANDLE);
	CONSOLE_CURSOR_INFO lpCursor;
	lpCursor.bVisible = visible;
	lpCursor.dwSize = 20;
	SetConsoleCursorInfo(console, &lpCursor);
}

int e1count = 0, e2count = 0, e3count = 0, e4count = 0;
void generate_enemy()
{
	e1count = 0, e2count = 0, e3count = 0, e4count = 0;
	int phase = 0;
	int phase1 = 220;
	int phase2 = 128;
	int phase3 = 64;
	int phase4 = 32;
	for (int i = 0; i < 4 + enemy_safe; i++)
	{
		if (gametime <= 76000 && gametime >= 70000)
		{
			phase = phase1;
		}
		if (gametime <= 70000 && gametime >= 55000)
		{
			phase = phase2;
		}
		if (gametime <= 55000 && gametime >= 25000)
		{
			phase = phase3;
		}
		if (gametime <= 25000 && gametime >= 0)
		{
			phase = phase4;
		}
		if (rand() % phase == 1)
		{
			if (enemy[i].dir == 0)
			{
				enemy[i].type = (rand() % 3) + 1;
				enemy[i].dir = (rand() % 4) + 1;
				if (enemy[i].dir == 1)
				{
					enemy[i].x = (rand() % 11) + 49;
					enemy[i].y = 21;
					e1count += 1;
				}
				if (enemy[i].dir == 2)
				{
					enemy[i].x = (rand() % 11) + 49;
					enemy[i].y = 33;
					e2count += 1;
				}
				if (enemy[i].dir == 3)
				{
					enemy[i].y = (rand() % 11) + 22;
					enemy[i].x = 48;
					e3count += 1;
				}
				if (enemy[i].dir == 4)
				{
					enemy[i].y = (rand() % 11) + 22;
					enemy[i].x = 60;
					e4count += 1;
				}
				/*if (e1count > 7 || e2count > 7 || e3count > 7 || e4count > 7)
				{
					i--;
				}
				else
					for (int j = 0; j < 4 + enemy_safe; j++)
					{
						if (i == j)
							break;
						if (enemy[i].x == enemy[j].x && enemy[i].y == enemy[j].y)
							i--;
					}*/
			}
		}		
	}
}

void enemy_move()
{
	for (int i = 0; i < 28; i++)
	{
		if (enemy[i].dir == 1)	//enemy_move_up
		{
			if (enemy[i].y > 3)	enemy[i].y--;
			else enemy[i].dir = 0;
		}
		if (enemy[i].dir == 2)	//enemy_move_down
		{
			if (enemy[i].y < 51)	enemy[i].y++;
			else enemy[i].dir = 0;
		}
		if (enemy[i].dir == 3)	//enemy_move_left
		{
			if (enemy[i].x > 3)	enemy[i].x--;
			else enemy[i].dir = 0;
		}
		if (enemy[i].dir == 4)	//enemy_move_right
		{
			if (enemy[i].x < 106) enemy[i].x++;
			else enemy[i].dir = 0;
		}
	}
}

void fill_enemy_to_buffer()
{
	for (int i = 0; i < 28; i++)
	{
		if (enemy[i].dir > 0)
		{
			int enemycolor = 0;
			consoleBuffer[enemy[i].x + screen_x * enemy[i].y].Char.AsciiChar = '*';
			if (enemy[i].type == 1)
			{
				enemycolor = 3;
			}
			if (enemy[i].type == 2)
			{
				enemycolor = 4;
			}
			if (enemy[i].type == 3)
			{
				enemycolor = 5;
			}
			consoleBuffer[enemy[i].x + screen_x * enemy[i].y].Attributes = enemycolor;
		}
	}
}

void erase_bullet(int x, int y)
{
	consoleBuffer[x + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + screen_x * y].Attributes = 0;
}

void  fill_time_to_buffer()
{
	gametime -= 50;

	int x = 113, y = 20;
	consoleBuffer[x + screen_x * y].Char.AsciiChar = 'T';
	consoleBuffer[x + screen_x * y].Attributes = 7;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = 'i';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 2 + screen_x * y].Char.AsciiChar = 'm';
	consoleBuffer[x + 2 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 3 + screen_x * y].Char.AsciiChar = 'e';
	consoleBuffer[x + 3 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 7 + screen_x * y].Char.AsciiChar = ':';
	consoleBuffer[x + 7 + screen_x * y].Attributes = 7;

	if (gametime > 60000)
	{
		consoleBuffer[x + 5 + screen_x * y].Char.AsciiChar = '0';
		consoleBuffer[x + 5 + screen_x * y].Attributes = 7;
		consoleBuffer[x + 6 + screen_x * y].Char.AsciiChar = '1';
		consoleBuffer[x + 6 + screen_x * y].Attributes = 7;

		consoleBuffer[x + 8 + screen_x * y].Char.AsciiChar = (gametime - 60000) / 10000 + '0';
		consoleBuffer[x + 8 + screen_x * y].Attributes = 7;
		consoleBuffer[x + 9 + screen_x * y].Char.AsciiChar = ((gametime - 60000) / 1000) % 10 + '0';
		consoleBuffer[x + 9 + screen_x * y].Attributes = 7;
	}
	if (gametime < 60000)
	{
		consoleBuffer[x + 5 + screen_x * y].Char.AsciiChar = '0';
		consoleBuffer[x + 5 + screen_x * y].Attributes = 7;
		consoleBuffer[x + 6 + screen_x * y].Char.AsciiChar = '0';
		consoleBuffer[x + 6 + screen_x * y].Attributes = 7;

		consoleBuffer[x + 8 + screen_x * y].Char.AsciiChar = gametime / 10000 + '0';
		consoleBuffer[x + 8 + screen_x * y].Attributes = 7;
		consoleBuffer[x + 9 + screen_x * y].Char.AsciiChar = (gametime / 1000) % 10 + '0';
		consoleBuffer[x + 9 + screen_x * y].Attributes = 7;
	}
}

void fill_score_to_buffer(int score)
{
	int x = 113, y = 25;
	consoleBuffer[x + screen_x * y].Char.AsciiChar = 's';
	consoleBuffer[x + screen_x * y].Attributes = 7;
	consoleBuffer[x + 1 + screen_x * y].Char.AsciiChar = 'c';
	consoleBuffer[x + 1 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 2 + screen_x * y].Char.AsciiChar = 'o';
	consoleBuffer[x + 2 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 3 + screen_x * y].Char.AsciiChar = 'r';
	consoleBuffer[x + 3 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 4 + screen_x * y].Char.AsciiChar = 'e';
	consoleBuffer[x + 4 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 5 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + 5 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 6 + screen_x * y].Char.AsciiChar = ':';
	consoleBuffer[x + 6 + screen_x * y].Attributes = 7;
	consoleBuffer[x + 7 + screen_x * y].Char.AsciiChar = ' ';
	consoleBuffer[x + 7 + screen_x * y].Attributes = 7;
	int countscore = 1;
	if (score < 0)
	{
		consoleBuffer[(x + 7 + countscore) + screen_x * y].Char.AsciiChar = '-';
		consoleBuffer[(x + 7 + countscore) + screen_x * y].Attributes = 7;
		countscore++;
		score = abs(score);
	}
	int count = 0;
	int check = score;
	while (check >= 10)
	{
		check /= 10;
		count++;
	}
	for (int i = count; i >= 0; i--)
	{
		int a = score / pow(10, i);
		consoleBuffer[(x + 7 + countscore) + screen_x * y].Char.AsciiChar = a + '0';
		consoleBuffer[(x + 7 + countscore) + screen_x * y].Attributes = 7;
		int b = pow(10, i);
		score = score % b;
		countscore++;
	}
}

void bullet_move()
{
	for (int i = 0; i < 100; i++)
	{
		if (bullet[i].dir == 1)
		{
			if (bullet[i].y > 33)	bullet[i].y--;
			else bullet[i].dir = 0;
		}
		if (bullet[i].dir == 2)
		{
			if (bullet[i].y < 21)	bullet[i].y++;
			else bullet[i].dir = 0;
		}
		if (bullet[i].dir == 3)
		{
			if (bullet[i].x < 48)	bullet[i].x++;
			else bullet[i].dir = 0;
		}
		if (bullet[i].dir == 4)
		{
			if (bullet[i].x > 60)	bullet[i].x--;
			else bullet[i].dir = 0;
		}
	}
}

void bullet2_move()
{
	for (int i = 0; i < 100; i++)
	{
		if (bullet2[i].dir == 1)
		{
			if (bullet2[i].y < 21)	bullet2[i].y++;
			else bullet2[i].dir = 0;
		}
		if (bullet2[i].dir == 2)
		{
			if (bullet2[i].y > 33)	bullet2[i].y--;
			else bullet2[i].dir = 0;
		}
		if (bullet2[i].dir == 3)
		{
			if (bullet2[i].x > 60)	bullet2[i].x--;
			else bullet2[i].dir = 0;
		}
		if (bullet2[i].dir == 4)
		{
			if (bullet2[i].x < 48)	bullet2[i].x++;
			else bullet2[i].dir = 0;
		}
	}
}

bool it1 = 0, it2 = 0, it3 = 0;
int it1start = 0, it2start = 0, it3start = 0;
void bullet_bounce()
{
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			if (bullet[i].x == enemy[j].x && bullet[i].dir > 0)
			{
				if (bullet[i].y == (enemy[j].y))
				{
					bullet[i].dir = 0;
					if (enemy[j].type > 1)
					{
						enemy[j].type -= 1;
						score += 100;
						streak += 100;
					}
					else if (enemy[j].type == 1)
					{
						score += 100;
						streak += 100;
						enemy[j].dir = 0;
					}
				}
			}
		}
		if (bullet[i].x == item.x && bullet[i].y == item.y && bullet[i].dir>0 && itemstatus == 1)
		{
			itemstatus = 0;
			if (item.type == 1)
			{
				it1 = 1;
				it1start = gametime;
			}
			if (item.type == 2)
			{
				it2 = 1;
				it2start = gametime;
			}
			if (item.type == 3)
			{
				it3 = 1;
				it3start = gametime;
			}
		}
	}
}

void bullet2_bounce()
{
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 28; j++)
		{
			if (bullet2[i].x == enemy[j].x && bullet2[i].dir > 0)
			{
				if (bullet2[i].y == (enemy[j].y))
				{
					bullet2[i].dir = 0;
					if (enemy[j].type > 1)
					{
						enemy[j].type -= 1;
						score += 100;
						streak += 100;
					}
					else if (enemy[j].type == 1)
					{
						score += 100;
						streak += 100;
						enemy[j].dir = 0;
					}
				}
			}
		}
		if (bullet2[i].x == item.x && bullet2[i].y == item.y && bullet2[i].dir > 0 && itemstatus==1)
		{
			itemstatus = 0;
			if (item.type == 1)
			{
				it1 = 1;
				it1start = gametime;
			}
			if (item.type == 2)
			{
				it2 = 1;
				it2start = gametime;
			}
			if (item.type == 3)
			{
				it3 = 1;
				it3start = gametime;
			}
		}
	}
}

void item3_bounce()
{
	for (int i = 0; i < 28; i++)
	{
		if (y == 54)
		{
			if (enemy[i].x == x + 1 && enemy[i].y > 33)
			{
				if (enemy[i].type == 1)
				{
					score += 100;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 2)
				{
					score += 200;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 3)
				{
					score += 300;
					streak += 100;
					enemy[i].type = 0;
				}
			}
		}
		if (y == 0)
		{
			if (enemy[i].x == x + 1 && enemy[i].y < 21)
			{
				if (enemy[i].type == 1)
				{
					score += 100;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 2)
				{
					score += 200;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 3)
				{
					score += 300;
					streak += 100;
					enemy[i].type = 0;
				}
			}
		}
		if (x == 0)
		{
			if (enemy[i].y == y + 1 && enemy[i].x < 48)
			{
				if (enemy[i].type == 1)
				{
					score += 100;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 2)
				{
					score += 200;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 3)
				{
					score += 300;
					streak += 100;
					enemy[i].type = 0;
				}
			}
		}
		if (x == 109 && enemy[i].x > 60)
		{
			if (enemy[i].y == y + 1)
			{
				if (enemy[i].type == 1)
				{
					score += 100;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 2)
				{
					score += 200;
					streak += 100;
					enemy[i].type = 0;
				}
				if (enemy[i].type == 3)
				{
					score += 300;
					streak += 100;
					enemy[i].type = 0;
				}
			}
		}
	}
}

void fill_bullet_to_buffer()
{
	for (int i = 0; i < 100; i++)
	{
		if (bullet[i].dir > 0 && bullet[i].x > 0 && bullet[i].x < screen_x && bullet[i].y < screen_y && bullet[i].y > 0 && bullet[i].dir <= 4)
		{
			consoleBuffer[bullet[i].x + screen_x * bullet[i].y].Char.AsciiChar = 'o';
			consoleBuffer[bullet[i].x + screen_x * bullet[i].y].Attributes = 6;
		}
	}
}

void fill_bullet2_to_buffer()
{
	for (int i = 0; i < 100; i++)
	{
		if (bullet2[i].dir > 0 && bullet2[i].x > 0 && bullet2[i].x < screen_x && bullet2[i].y < screen_y)
		{
			consoleBuffer[bullet2[i].x + screen_x * bullet2[i].y].Char.AsciiChar = 'o';
			consoleBuffer[bullet2[i].x + screen_x * bullet2[i].y].Attributes = 6;
		}
	}
}

void fill_item3_to_buffer()
{
	if (y == 54)
	{
		for (int i = 1; i < 22; i++)
		{
			consoleBuffer[x + 1 + screen_x * (y - i)].Char.AsciiChar = ' ';
			consoleBuffer[x + 1 + screen_x * (y - i)].Attributes = 112;
		}

	}
	if (y == 0)
	{
		for (int i = 1; i < 22; i++)
		{
			consoleBuffer[x + 1 + screen_x * (y + i)].Char.AsciiChar = ' ';
			consoleBuffer[x + 1 + screen_x * (y + i)].Attributes = 112;
		}

	}
	if (x == 0)
	{
		for (int i = 3; i < 49; i++)
		{
			consoleBuffer[x+i + screen_x * (y+1)].Char.AsciiChar = ' ';
			consoleBuffer[x+i + screen_x * (y+1)].Attributes = 112;
		}
	}
	if (x == 109)
	{
		for (int i = 3; i < 50; i++)
		{
			consoleBuffer[x - i + screen_x * (y + 1)].Char.AsciiChar = ' ';
			consoleBuffer[x - i + screen_x * (y + 1)].Attributes = 112;
		}
	}
}

void ult_move()
{
	int ultcolor = 16 * (rand() % 15 + 1);
	for (int i = 33; i < 52; i++)
	{	
		for (int j = 49; j < 60; j++)
		{
			consoleBuffer[j + screen_x * i].Char.AsciiChar = ' ';
			consoleBuffer[j + screen_x * i].Attributes = ultcolor;
		}
	}
	for (int i = 3; i < 22; i++)
	{
		for (int j = 49; j < 60; j++)
		{
			consoleBuffer[j + screen_x * i].Char.AsciiChar = ' ';
			consoleBuffer[j + screen_x * i].Attributes = ultcolor;
		}
	}
	for (int i = 22; i < 33; i++)
	{
		for (int j = 3; j < 49; j++)
		{
			consoleBuffer[j + screen_x * i].Char.AsciiChar = ' ';
			consoleBuffer[j + screen_x * i].Attributes = ultcolor;
		}
	}
	for (int i = 22; i < 33; i++)
	{
		for (int j = 60; j < 107; j++)
		{
			consoleBuffer[j + screen_x * i].Char.AsciiChar = ' ';
			consoleBuffer[j + screen_x * i].Attributes = ultcolor;
		}
	}
}

void ult_bounce()
{
	for (int i = 0; i < 28; i++)
	{
		if (enemy[i].type == 1) 
		{
			score += 100;
			enemy[i].type = 0;
		}
		if (enemy[i].type == 2)
		{
			score += 200;
			enemy[i].type = 0;
		}
		if (enemy[i].type == 3)
		{
			score += 300;
			enemy[i].type = 0;
		}
	}
}

int main()
{
	setcursor(0);
	srand(time(NULL));
	setConsole(screen_x, screen_y);
	char ch = ' ';
	int sleepcount = 0;
	int move_speed_up_down = 0;
	int move_speed_left_right = 0;
	int streak = 0;
	int item_speed = 0;
	int bullet_speed = 0;
	bool shoot = 0;
	bool ult = 0;
	drawgunxd(x, y);
	DWORD numEvents = 0;
	DWORD numEventsRead = 0;
	setConsole(screen_x, screen_y);
	setMode();
	char eventreceive = 's';
	while (play)
	{
		// to use with keyboard and mouse
		GetNumberOfConsoleInputEvents(rHnd, &numEvents);
		if (numEvents != 0)
		{
			INPUT_RECORD* eventBuffer = new INPUT_RECORD[numEvents];
			ReadConsoleInput(rHnd, eventBuffer, numEvents, &numEventsRead);
			for (DWORD i = 0; i < numEventsRead; ++i)
			{
				// get from KEYBOARD
				if (eventBuffer[i].EventType == KEY_EVENT && eventBuffer[i].Event.KeyEvent.bKeyDown == true)
				{
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_ESCAPE)
					{
						play = false;
					}
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_DOWN)
					{
						eventreceive = '2';
					}
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_UP)
					{
						eventreceive = '8';
					}
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_LEFT)
					{
						eventreceive = '4';
					}
					if (eventBuffer[i].Event.KeyEvent.wVirtualKeyCode == VK_RIGHT)
					{
						eventreceive = '6';
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 's')
					{
						eventreceive = 's';
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 'a')
					{
						eventreceive = 'a';
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 'w')
					{
						eventreceive = 'w';
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 'd')
					{
						eventreceive = 'd';
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 'e')
					{
						ult = 1;
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == 'r')
					{
						ammo = 1;
					}
					if (eventBuffer[i].Event.KeyEvent.uChar.AsciiChar == ' ')
					{
						shoot = 1;
					}
				}
			}
			delete[] eventBuffer;
		}

		bullet_move();
		bullet_bounce();
		bullet2_move();
		bullet2_bounce();
		if (it3)
		{
			item3_bounce();
		}
		if (streak > 5000)
		{
			if (ult)
				ult_bounce();
		}		
		generate_enemy();
		if (!it1 && !it2 && !it3)
		{
			generate_item();
			if (item_speed == 5)
			{
				item_speed = 0;
			}
			item_move();
		}

		if (move_speed_up_down == 6)
		{
			enemy_move();
			move_speed_up_down = 0;
		}
		
		if (bullet_speed == 5)
		{
			bullet_speed = 0;
		}

		clear_buffer();
		fill_enemy_to_buffer();
		fill_bullet_to_buffer();
		fill_bullet2_to_buffer();
		if (!it1 && !it2 && !it3)
		{
			fill_item_to_buffer();
		}
		if (it3 && shoot)
		{
			fill_item3_to_buffer();
		}
		if (streak > 5000)
		{
			if (ult)
				ult_move();
		}		

		if (eventreceive == 's')
		{
			erasegunx(x, y);
			eraseguny(x, y);
			x = 54, y = 54;
			drawgunxd(x, y);
		}
		if (eventreceive == 'w')
		{
			erasegunx(x, y);
			eraseguny(x, y);
			x = 54, y = 0;
			drawgunxu(x, y);
		}
		if (eventreceive == 'a')
		{
			erasegunx(x, y);
			eraseguny(x, y);
			x = 0, y = 27;
			drawgunyl(x, y);
		}
		if (eventreceive == 'd')
		{
			erasegunx(x, y);
			eraseguny(x, y);
			x = 109, y = 27;
			drawgunyr(x, y);
		}

		if (eventreceive == '4' && (y == 0 || y == 54))
		{
			erasegunx(x, y);
			if (y == 0)
			{
				if (x <= 2)
				{
					x = 3;
				}
				drawgunxu(--x, y);
			}
			else
			{
				if (x <= 2)
				{
					x = 3;
				}
				drawgunxd(--x, y);
			}
		}
		if (eventreceive == '6' && (y == 0 || y == 54))
		{
			erasegunx(x, y);
			if (y == 0)
			{
				if (x >= 105)
				{
					x = 104;
				}
				drawgunxu(++x, y);
			}
			else
			{
				if (x >= 105)
				{
					x = 104;
				}
				drawgunxd(++x, y);
			}
		}
		if (eventreceive == '2' && (x == 0 || x == 109))
		{
			eraseguny(x, y);
			if (x == 0)
			{
				if (y >= 50)
				{
					y = 49;
				}
				drawgunyl(x, ++y);
			}
			else
			{
				if (y >= 50)
				{
					y = 49;
				}
				drawgunyr(x, ++y);
			}
		}
		if (eventreceive == '8' && (x == 0 || x == 109))
		{
			eraseguny(x, y);
			if (x == 0)
			{
				if (y <= 2)
				{
					y = 3;
				}
				drawgunyl(x, --y);
			}
			else
			{
				if (y <= 2)
				{
					y = 3;
				}
				drawgunyr(x, --y);
			}
		}

		if ((((shoot && bullet_speed%2==0) || it1) && ammo)&&!it3)
		{
			for (int i = 0; i < 100; i++)
			{
				if (bullet[i].dir == 0 && bulletcount == i)
				{
					if (y == 54)
					{
						bullet[i].x = x + 1;
						bullet[i].y = y - 2;
						bullet[i].dir = 1;
					}
					if (y == 0)
					{
						bullet[i].x = x + 1;
						bullet[i].y = y + 2;
						bullet[i].dir = 2;
					}
					if (x == 0)
					{
						bullet[i].x = x + 2;
						bullet[i].y = y + 1;
						bullet[i].dir = 3;
					}
					if (x == 109)
					{
						bullet[i].x = x - 2;
						bullet[i].y = y + 1;
						bullet[i].dir = 4;
					}
				}
				if ((it2 && ammo)&&!it3)
				{
					if (bullet2[i].dir == 0 && bullet2count == i)
					{
						if (y == 54)
						{
							bullet2[i].x = x + 1;
							bullet2[i].y = 2;
							bullet2[i].dir = 1;
						}
						if (y == 0)
						{
							bullet2[i].x = x + 1;
							bullet2[i].y = 52;
							bullet2[i].dir = 2;
						}
						if (x == 0)
						{
							bullet2[i].x = 107;
							bullet2[i].y = y + 1;
							bullet2[i].dir = 3;
						}
						if (x == 109)
						{
							bullet2[i].x = 2;
							bullet2[i].y = y + 1;
							bullet2[i].dir = 4;
						}
					}
				}
			}
			bulletcount = (bulletcount + 1) % 100;
			bullet2count = (bullet2count + 1) % 100;
			if (bulletcount == 10)
			{
				ammo = 0;
			}
		}
		
		if (it1start - gametime > 7000)
			it1 = 0;
		if (it2start - gametime > 7000)
			it2 = 0;
		if (it3start - gametime > 5000)
			it3 = 0;

		fill_border_to_buffer();
		fill_time_to_buffer();
		fill_score_to_buffer(score);
		fill_buffer_to_console();
		Sleep(50);
		sleepcount = sleepcount + 1;
		move_speed_up_down += 1;
		move_speed_left_right += 1;
		item_speed += 1;
		bullet_speed += 1;
		if (enemy_safe < 23)
			enemy_safe += 1;
	}
	return 0;
}
